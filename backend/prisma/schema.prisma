generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rol {
  id       Int       @id @default(autoincrement())
  nombre   String    @unique
  usuarios Usuario[]
}

model Usuario {
  id          Int    @id @default(autoincrement())
  nombre      String
  correo      String @unique
  contraseÃ±a String
  rolId       Int
  rol         Rol    @relation(fields: [rolId], references: [id])

  conciliacionesCreadas Conciliacion[] @relation(name: "UsuarioCreador")
  auditoriasRealizadas  Conciliacion[] @relation(name: "UsuarioAuditor")
  decisionesTomadas     Conciliacion[] @relation(name: "UsuarioDirector")

  cuentas        CuentaBancaria[]
  auditoria      Auditoria[]
  notificaciones Notificacion[]
  movimientos    MovimientosCuenta[]
  librosMayor    LibroMayor[]

  createdAt DateTime @default(now())
}

model CuentaBancaria {
  id          Int                 @id @default(autoincrement())
  nombre      String
  numero      String              @unique
  banco       String
  saldo       Decimal             @default(0.0)
  usuarioId   Int
  usuario     Usuario             @relation(fields: [usuarioId], references: [id])
  movimientos MovimientosCuenta[] // ðŸ”¹ RelaciÃ³n con los movimientos de la cuenta     
  librosMayor LibroMayor[]        // ðŸ”¹ RelaciÃ³n con los libros mayores de la cuenta
  createdAt   DateTime            @default(now())
}

model MovimientosCuenta {
  id                  Int                   @id @default(autoincrement())
  cuentaId            Int
  cuenta              CuentaBancaria        @relation(fields: [cuentaId], references: [id])
  usuarioId           Int
  usuario             Usuario               @relation(fields: [usuarioId], references: [id])
  detalles            MovimientoDetalle[]
  detalleConciliacion DetalleConciliacion[]
  createdAt           DateTime              @default(now())
}

model MovimientoDetalle {
  id             Int               @id @default(autoincrement())
  movimientoId   Int
  movimiento     MovimientosCuenta @relation(fields: [movimientoId], references: [id])
  fechaOperacion DateTime
  fechaValor     DateTime
  concepto       String
  importe        Decimal
  saldoAnterior  Decimal           @default(0.00)
  saldoFinal     Decimal           @default(0.00)
  createdAt      DateTime          @default(now())
}

model LibroMayor {
  id                  Int                   @id @default(autoincrement())
  cuentaId            Int
  cuenta              CuentaBancaria        @relation(fields: [cuentaId], references: [id])
  usuarioId           Int
  usuario             Usuario               @relation(fields: [usuarioId], references: [id])
  fechaOperacion      DateTime
  descripcion         String
  debe                Decimal?              @default(0.00)
  haber               Decimal?              @default(0.00)
  saldoAnterior       Decimal               @default(0.00) // ðŸ”¹ Saldo al inicio del mes
  saldoFinal          Decimal               @default(0.00) // ðŸ”¹ Saldo al final del mes
  detalleConciliacion DetalleConciliacion[]
  createdAt           DateTime              @default(now())
}

model Conciliacion {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  usuario   Usuario  @relation(name: "UsuarioCreador", fields: [usuarioId], references: [id])
  fecha     DateTime @default(now())
  estadoId  Int
  estado    Estado   @relation(fields: [estadoId], references: [id])

  auditorId Int?
  auditor   Usuario? @relation(name: "UsuarioAuditor", fields: [auditorId], references: [id])

  directorId Int?
  director   Usuario? @relation(name: "UsuarioDirector", fields: [directorId], references: [id])

  observaciones          String?
  conciliacionesDetalles DetalleConciliacion[]

  createdAt DateTime @default(now())
}

model DetalleConciliacion {
  id                 Int                @id @default(autoincrement())
  conciliacionId     Int
  conciliacion       Conciliacion       @relation(fields: [conciliacionId], references: [id])
  libroMayorId       Int?
  libroMayor         LibroMayor?        @relation(fields: [libroMayorId], references: [id])
  movimientoCuentaId Int?
  movimientoCuenta   MovimientosCuenta? @relation(fields: [movimientoCuentaId], references: [id])
  estadoId           Int
  estado             Estado             @relation(fields: [estadoId], references: [id])
  createdAt          DateTime           @default(now())
}

model Estado {
  id                    Int                   @id @default(autoincrement())
  nombre                String                @unique
  conciliaciones        Conciliacion[]
  detalleConciliaciones DetalleConciliacion[]
}

model Auditoria {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  fecha     DateTime @default(now())
  accion    String
}

model Notificacion {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  mensaje   String
  leida     Boolean  @default(false)
  createdAt DateTime @default(now())
}
