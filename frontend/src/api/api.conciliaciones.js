import { api } from "./api.config.js";

export const conciliacionAPI = {
  getAllConciliaciones: async () => {
    try {
      const response = await api.get("/conciliaciones");
      return response.data;
    } catch (error) {
      console.error("Error al obtener conciliaciones:", error.response?.data || error.message);
      throw new Error("No se pudieron obtener las conciliaciones.");
    }
  },

  getConciliacionById: async (id) => {
    try {
      if (!id || isNaN(id)) throw new Error("ID inv√°lido.");
      const response = await api.get(`/conciliaciones/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Error al obtener la conciliaci√≥n con ID ${id}:`, error.response?.data || error.message);
      throw new Error("No se pudo obtener la conciliaci√≥n.");
    }
  },

  getConciliacionByCuentaId: async (id) => {
    try {
      if (!id || isNaN(id)) throw new Error("ID inv√°lido para obtener la conciliaci√≥n de la cuenta.");
      const response = await api.get(`/conciliaciones/cuenta/${id}`);
      return response.data;
    } catch (error) {
      console.error(
        `‚ùå Error al obtener la conciliaci√≥n de la cuenta con ID ${id}:`,
        error.response?.data || error.message
      );
      throw new Error(`No se pudo obtener la conciliaci√≥n de la cuenta con ID ${id}.`);
    }
  },

  getMovimientosParaConciliacion: async (cuentaId, mes) => {
    try {
      if (!cuentaId || !mes) throw new Error("Cuenta y mes son requeridos.");
      const response = await api.get(`/conciliaciones/movimientos/${cuentaId}/${mes}`);
      return response.data;
    } catch (error) {
      console.error("‚ùå Error al obtener movimientos y libros mayor:", error.response?.data || error.message);
      throw new Error("No se pudieron obtener los datos para la conciliaci√≥n.");
    }
  },

  createConciliacion: async (data) => {
    try {
      // üîπ Filtrar detalles para evitar valores `null`
      const detallesConciliacion = data.detalles.map((detalle) => ({
        ...detalle,
        movimientoCuentaId: detalle.tipo === "Banco" ? detalle.id : null,
        libroMayorId: detalle.tipo === "Libro Mayor" ? detalle.id : null,
      })).filter(detalle => detalle.movimientoCuentaId !== null || detalle.libroMayorId !== null); // ‚ùå Evita registros vac√≠os
  
      const conciliacionData = {
        usuarioId: data.usuarioId,
        cuentaId: data.cuentaId,
        fecha: data.fecha,
        estadoId: 1,
        conciliacionesDetalles: detallesConciliacion,
      };
  
      console.log("üìå Enviando conciliaci√≥n:", JSON.stringify(conciliacionData, null, 2));
  
      const response = await api.post("/conciliaciones/generar", conciliacionData);
      return response.data;
    } catch (error) {
      console.error("‚ùå Error al crear conciliaci√≥n:", error.response?.data || error.message);
      throw new Error("No se pudo crear la conciliaci√≥n.");
    }
  },

  updateConciliacionEstado: async (id, data) => {
    try {
      if (!id || isNaN(id)) throw new Error("ID inv√°lido para actualizar la conciliaci√≥n.");

      console.log(`üìå Enviando actualizaci√≥n de conciliaci√≥n con ID ${id}:`, data);

      const response = await api.put(`/conciliaciones/${id}`, data);
      return response.data;
    } catch (error) {
      console.error(`‚ùå Error al actualizar la conciliaci√≥n con ID ${id}:`, error.response?.data || error.message);
      throw new Error("No se pudo actualizar la conciliaci√≥n.");
    }
  },
};
